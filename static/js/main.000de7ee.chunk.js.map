{"version":3,"sources":["utils/contractABI.js","img/ethlogo.png","Components/Header/Header.js","utils/alerts.js","utils/formatValues.js","Components/ConnectWallet/ConnectWallet.js","Components/KingView/KingView.js","Components/Dashboard/Dashboard.js","App.js","index.js"],"names":["module","exports","abi","Header","className","networkErrorAlert","swal","icon","title","text","transactionSuccessAlert","response","closeOnClickOutside","content","target","rel","href","transactionHash","transactionFailedAlert","button","sendingTransactionAlert","src","ethlogo","alt","genericErrorAlert","installMetaMaskAlert","BigNumber","config","DECIMAL_PLACES","formatEthAmount","amount","shiftedBy","toString","ConnectWallet","props","connectWallet","onClick","KingView","userAccount","ethBalance","kingRansom","kingAddress","kingMe","handleInputAmountChange","kingInputAmount","URL","blockies","createDataURL","seed","onChange","value","type","Dashboard","a","contractAddress","state","web3","Web3","givenProvider","contract","eth","Contract","window","ethereum","networkVersion","enable","res","setState","walletConnected","methodContainer","console","log","checkContractInfo","checkCurrentAccount","checkEthBalance","methods","King","call","weiKingRansom","coronationSubscription","coronationSub","events","Coronation","on","event","returnValues","_newKing","_kingRansom","error","account","getBalance","err","formattedEthBalance","autoRefreshOnNetworkChange","accounts","kingRansomTest","utils","toWei","becomeKing","send","from","txHash","this","unsubcribe","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.000de7ee.chunk.js","sourcesContent":["// Contract address 0x2800cC9F11E0956B20FE48FcC8b69db310D93f02 on Ropsten\nconst abi = [{\"constant\":true,\"inputs\":[],\"name\":\"King\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kingRansom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeKing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newKing\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_kingRansom\",\"type\":\"uint256\"}],\"name\":\"Coronation\",\"type\":\"event\"}];\n\nmodule.exports = { abi };","module.exports = __webpack_public_path__ + \"static/media/ethlogo.bdc70232.png\";","import React from 'react';\nimport './Header.css';\n\nexport default function Header() {\n    return (\n        <div className='header-container'>\n            <h1 className='header-title'>King of the Dapp</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport swal from '@sweetalert/with-react';\nimport ethlogo from '../img/ethlogo.png';\n\nexport const networkErrorAlert = () => {\n    return swal({\n            icon: \"error\",\n            title: \"Network Error\",\n            text: \"Please switch to the Ropsten Test Network in your MetaMask extension\"\n        })\n}\n\nexport const transactionSuccessAlert = (response) => {\n    return swal({\n            icon: 'success',\n            title: 'Tx Successfully Sent',\n            closeOnClickOutside: false,\n            content: (\n                <div>\n                    <p>Transaction Hash:</p>\n                    <p>\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://ropsten.etherscan.io/tx/${response.transactionHash}`}>{response.transactionHash}</a>\n                    </p>\n                </div>)\n        })\n}\n\nexport const transactionFailedAlert = () => {\n    return swal({\n            icon: \"error\",\n            title: \"Transaction Failed\",\n            text: \"There was an error sending this transaciton.\",\n            button: true\n        })\n}\n\nexport const sendingTransactionAlert = () => {\n    return swal({\n            closeOnClickOutside: false,\n            button: false,\n            content: (<div>\n                <img className='block-load-img' src={ethlogo} alt='block loading'/>\n                <p>Blockchain magic in progress...</p>\n                <br/>\n            </div>)\n        })\n}\n\nexport const genericErrorAlert = () => {\n    return swal({\n            icon: \"error\",\n            title: \"Error\",\n            text: \"An error has occurred.\",\n            button: true\n        })\n}\n\nexport const installMetaMaskAlert = () => {\n    return swal({\n            icon: \"error\",\n            title: \"MetaMask Missing\",\n            text: \"Please make sure that you have the MetaMask extension installed.\",\n            button: true\n    })\n}","import BigNumber from 'bignumber.js';\n\nBigNumber.config({ DECIMAL_PLACES: 4 });\n\nexport const formatEthAmount = (amount) => {\n    const bn = new BigNumber(amount);\n    return bn.shiftedBy(-18).toString(10);\n}","import React from 'react';\nimport './ConnectWallet.css';\n\nexport default function ConnectWallet(props) {\n    const { connectWallet } = props;\n    return (\n        <div className='connect-container'>\n            <p className='mm-message'>Please make sure that you are connected to the Ropsten Test Network.</p>\n            <button onClick={connectWallet}>Connect Wallet</button>\n            <a className='mm-download' \n                target=\"_blank\" \n                rel=\"noopener noreferrer\" \n                href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn'\n            >\n                Download MetaMask\n            </a>\n        </div>\n    )\n};\n\n","import React from 'react';\nimport './KingView.css';\nimport blockies from 'ethereum-blockies-png';\n\nexport default function KingView(props) {\n    const { \n        userAccount, \n        ethBalance, \n        kingRansom, \n        kingAddress, \n        kingMe, \n        handleInputAmountChange, \n        kingInputAmount \n    } = props;\n    \n    let URL = blockies.createDataURL({seed: kingAddress});\n    return (\n        <div className='dashboard-container'>\n\n            <div className='user-info-container'>\n                <p className='user-address'>Your Address: {userAccount}</p>\n                <p>Balance: {ethBalance} ETH</p>\n            </div>\n\n            <div className='king-info-container'>\n                <img className='blockie-img' alt='eth-blockie' src={URL} />\n                <p className='king-address'>King: {kingAddress}</p>\n                <p>King's Ransom: {kingRansom} ETH</p>\n            </div>\n\n            <div className='input-container'>\n                <input className='input-box' \n                    onChange={handleInputAmountChange} \n                    value={kingInputAmount} \n                    type=\"number\"\n                />\n                <button className='input-btn' onClick={kingMe}>King Me</button>\n                <p className='input-text'>*The amount entered must be at least 0.1 ETH more than the current amount.</p>\n            </div>\n\n                <a target=\"_blank\" \n                    rel=\"noopener noreferrer\" \n                    href=\"https://medium.com/@0xnaderdev/king-of-the-dapp-an-overview-on-how-to-create-a-react-interface-for-an-ethereum-smart-contract-de53334619ea\"\n                >\n                    <p className='medium-link'>Read the tutorial on Medium.</p>\n                </a>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { abi } from '../../utils/contractABI';\nimport BigNumber from 'bignumber.js';\n\n// Sweet Alerts\nimport {\n    networkErrorAlert,\n    transactionSuccessAlert,\n    transactionFailedAlert,\n    sendingTransactionAlert,\n    genericErrorAlert,\n    installMetaMaskAlert\n} from '../../utils/alerts';\n\n// Formatting Functions\nimport { formatEthAmount } from '../../utils/formatValues';\n\n// React Components \nimport ConnectWallet from '../ConnectWallet/ConnectWallet';\nimport KingView from '../KingView/KingView';\n\nexport default class Dashboard extends Component {\n    constructor() {\n        super();\n        \n        this.state = {\n            walletConnected: false,\n            userAccount: null,\n            ethBalance: null,\n            // Ropsten\n            contractAddress: \"0x2800cC9F11E0956B20FE48FcC8b69db310D93f02\",\n            // Ganache\n            // contractAddress: \"0xABB2986b02fFfef2ac9D4fFE0397Cb0A6C254591\",\n            kingAddress: null,\n            kingRansom: null,\n            kingInputAmount: \"\",\n            contract: {},\n            web3: {},\n            coronationSub: null\n        }\n    }\n    \n    // Prompts the user to connect their Ethereum wallet\n    connectWallet = async () => {\n        const { contractAddress } = this.state;\n\n        // Creating both a web3 and contract instance\n        const web3 = new Web3(Web3.givenProvider);\n        const contract = new web3.eth.Contract(abi, contractAddress);\n\n        if(window.ethereum) {\n        // Makes sure that the user is connected to Ropsten\n            if(window.ethereum.networkVersion === \"3\") {\n                try {\n                    const res = await window.ethereum.enable()\n                    this.setState({\n                        walletConnected: true,\n                        userAccount: res[0],\n                        // Storing instances in the state obj\n                        contract,\n                        web3\n                    });\n                    this.methodContainer(res);\n                } catch (error) {\n                    console.log(error)\n                    genericErrorAlert()\n                }\n            } else {\n                networkErrorAlert();\n            }\n        } else {\n            installMetaMaskAlert();\n        }\n    }\n\n    // Contains methods that will run after the user connects their MetaMask account\n    methodContainer = (res) => {\n        this.checkContractInfo();\n        this.checkCurrentAccount();\n        this.checkEthBalance(res[0]);\n    }\n\n    // Checks the current state of the contract variables\n    checkContractInfo = async () => {\n        const { contract } = this.state;\n        if(contract) {\n            try{\n                // Returns which address is the current King\n                const kingAddress = await contract.methods.King().call();\n\n                // Returns how much Ether is locked up in Wei\n                const weiKingRansom = await contract.methods.kingRansom().call();\n                const kingRansom = formatEthAmount(weiKingRansom);\n\n                this.setState({ kingRansom, kingAddress });\n                this.coronationSubscription(contract);\n            } catch (error) {\n                console.log(error);\n                genericErrorAlert();\n            }\n        } else {\n            console.log('contract is not defined');\n            genericErrorAlert();\n        }\n    }\n\n    coronationSubscription = (contract) => {\n        const coronationSub = contract.events.Coronation()\n        .on('data', event => {\n            const kingAddress = event.returnValues._newKing;\n            const kingRansom = formatEthAmount(event.returnValues._kingRansom);\n\n            this.setState({ kingAddress, kingRansom });\n        })\n        .on('error', error => {\n            console.log(error);\n            genericErrorAlert();\n        });\n        this.setState({ coronationSub });\n    }\n\n    // Looks for the user's current Eth balance on the Ropsten Test Network, if they are on a different network it throws an error message\n    checkEthBalance = (account) => {\n        const { web3 } = this.state;\n        if(account) {\n            web3.eth.getBalance(account, (err, res) => {\n                if(!err) {\n                    // The response comes back as a string, however, I only want to display 3 decimal places so I convert it to a number to use the toFixed method\n                    const formattedEthBalance = formatEthAmount(res);\n                    this.setState({\n                        ethBalance: formattedEthBalance\n                    })\n                }\n                else {\n                    console.log(err);\n                    genericErrorAlert();\n                }\n            });\n        }\n        else {\n            this.setState({walletConnected: false});\n        }\n    }\n    \n    checkCurrentAccount = () => {\n        const { ethereum } = window;\n        // Prevents the page from reloading when the user changes networks. \n        ethereum.autoRefreshOnNetworkChange = false;\n\n        // Anytime the user changes their MetaMask account this function will run and update the UI to show the selected account and its Ether balance\n        ethereum.on('accountsChanged', (accounts) => {\n            this.setState({ userAccount: accounts[0] });\n            this.checkEthBalance(accounts[0]);\n        });\n    }\n    \n    // Method that creates an Eth transaction to update the state of the contract\n    kingMe = async () => {\n        const { userAccount, kingInputAmount, web3, contract, kingRansom } = this.state;\n\n        const kingRansomTest = new BigNumber(kingRansom);\n        const kingInputAmountTest = new BigNumber(kingInputAmount);\n\n        // Makes sure that the use has entered in an amount that is at least 0.1 Eth greater than the current kingRansom\n        if(kingInputAmountTest >= (kingRansomTest + 0.1)) {\n            const value = web3.utils.toWei(kingInputAmount);\n\n            contract.methods.becomeKing().send({ from: userAccount, value })\n                .on('receipt', (txHash) => {\n                    this.checkEthBalance(userAccount);\n                    transactionSuccessAlert(txHash);\n                })\n                .on('error', (error) => {\n                    console.log(error);\n                    genericErrorAlert();\n                });\n\n            // Sets in the input box to zero\n            this.setState({ kingInputAmount: 0 });\n\n            // Creates an animation while the use is waiting for their tx to be submitted.\n            sendingTransactionAlert();\n        } else {\n            transactionFailedAlert();\n        }\n    }\n\n    // Sets the state of the kingInputAmount variable when the user types in the input box\n    handleInputAmountChange = event => {\n        this.setState({\n            kingInputAmount: event.target.value.toString()\n        });\n    }\n\n    // Stops listening for Coronation events when the component unmounts\n    componentWillUnmount() {\n        const { coronationSub } = this.state;\n        if(coronationSub) {\n            coronationSub.unsubcribe();\n        }\n    }\n\n    render() {\n        const { \n            walletConnected, \n            ethBalance, \n            userAccount, \n            kingAddress, \n            kingRansom, \n            kingInputAmount \n        } = this.state;\n        return (\n            <div>\n                {/* Conditional rendering based on if the user has connected their Ethereum wallet */}\n                {!walletConnected\n                ?\n                <div>\n                    <ConnectWallet connectWallet={this.connectWallet} /> \n                </div>\n                : \n                <div>\n                    {/* Component shows info about the user's Ethereum wallet and the state of the King of the Dapp Contract */}\n                    <KingView handleInputAmountChange={this.handleInputAmountChange} \n                        ethBalance={ethBalance} \n                        userAccount={userAccount} \n                        kingAddress={kingAddress} \n                        kingInputAmount={kingInputAmount} \n                        kingRansom={kingRansom} \n                        kingMe={this.kingMe}\n                    />\n                </div>}\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './reset.css';\nimport './App.css';\nimport './styles/sweetAlert.css'; \nimport Header from './Components/Header/Header';\nimport Dashboard from './Components/Dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        <Header />\n        <Dashboard />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}