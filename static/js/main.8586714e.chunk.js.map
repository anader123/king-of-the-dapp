{"version":3,"sources":["utils/contractABI.js","utils/ethlogo.png","Components/Header/Header.js","Components/ConnectMM.js","Components/KingView.js","Components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","abi","Header","className","ConnectMM","connectMetaMask","this","props","onClick","target","rel","href","Component","KingView","userAccount","ethBalance","kingRansom","kingAddress","kingMe","handleInputAmountChange","kingAmount","URL","blockies","createDataURL","seed","alt","src","onChange","value","type","Dashboard","window","ethereum","enable","then","res","setState","metamaskConnected","checkEthBalance","checkContractInfo","checkCurrentAccount","setInterval","state","contractAddress","web3","Web3","givenProvider","contract","eth","Contract","transactionObject","from","to","utils","toWei","data","methods","becomeKing","encodeABI","sendTransaction","swal","icon","title","closeOnClickOutside","content","transactionHash","catch","err","console","log","setTimeout","blockchainMessage","button","ethlogo","event","King","call","ethAmount","fromWei","toFixed","on","accounts","account","undefined","getBalance","shortenedEthBalance","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8586714e.chunk.js","sourcesContent":["// Contract address https://ropsten.etherscan.io/address/0x04d27c6ec43f965bd490935873c9aea6987bdef4\nconst abi = [\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [],\n\t\t\"name\": \"becomeKing\",\n\t\t\"outputs\": [],\n\t\t\"payable\": true,\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"payable\": true,\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"payable\": true,\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"fallback\"\n\t},\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"name\": \"_newKing\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"name\": \"_kingRansom\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"Coronation\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"King\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"kingRansom\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n];\n\nmodule.exports = { abi };","module.exports = __webpack_public_path__ + \"static/media/ethlogo.bdc70232.png\";","import React from 'react';\nimport './Header.css';\n\nexport default function Header() {\n    return (\n        <div className='header-container'>\n            <h1 className='header-title'>King of the Dapp</h1>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\n\nexport default class ConnectMM extends Component {\n    render() {\n        const { connectMetaMask } = this.props;\n        return (\n            <div className='connect-container'>\n                <button onClick={connectMetaMask}>Connect MM</button>\n                <a className='mm-download' target=\"_blank\" rel=\"noopener noreferrer\" href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn'><span>Download MetaMask</span></a>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport blockies from 'ethereum-blockies-png';\n\n// Contract address https://ropsten.etherscan.io/address/0x04d27c6ec43f965bd490935873c9aea6987bdef4\n\nexport default function KingView(props) {\n    const { userAccount, ethBalance, kingRansom, kingAddress, kingMe, handleInputAmountChange, kingAmount } = props;\n    let URL = blockies.createDataURL({seed: kingAddress});\n    return (\n        <div className='dashboard-container'>\n            <div className='user-info-container'>\n                <p className='user-address'>Your Address: {userAccount}</p>\n                <p>Balance: {ethBalance} ETH</p>\n            </div>\n            <div className='king-info-container'>\n                <img className='blockie-img' alt='eth-blockie' src={URL} />\n                <p className='king-name'>King: {kingAddress}</p>\n                <p>King's Ransom: {kingRansom} ETH</p>\n            </div>\n            <div className='input-container'>\n                <input className='input-box' onChange={handleInputAmountChange} value={kingAmount} type=\"number\"/>\n                <button className='input-btn' onClick={kingMe}>King Me</button>\n                <p className='input-text'>*Enter an amount that is at least 0.1 ETH greater.</p>\n            </div>\n            <p className='medium-link'>Read the tutorial on Medium.</p>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { abi } from '../../utils/contractABI';\nimport swal from '@sweetalert/with-react';\nimport './Dashboard.css';\nimport ethlogo from '../../utils/ethlogo.png';\n\n// React Components \nimport ConnectMM from '../ConnectMM';\nimport KingView from '../KingView';\n\nexport default class Dashboard extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            metamaskConnected: false,\n            userAccount: null,\n            ethBalance: null,\n            contractAddress: \"0xECdAb99dBa830F3a097c3bF97139E24Bd4A214d0\",\n            kingAddress: null,\n            kingRansom: null,\n            kingAmount: 0,\n        }\n    };\n\n    connectMetaMask = () => {\n        const { ethereum } = window;\n        ethereum.enable()\n            .then(res => {\n                this.setState({\n                    metamaskConnected: true,\n                    userAccount: res[0]\n                });\n                this.checkEthBalance(res[0]);\n                this.checkContractInfo();\n                this.checkCurrentAccount();\n                setInterval(() => {\n                    this.checkContractInfo();\n                }, 20000);\n            });\n\n    };\n\n    kingMe = () => {\n        const { userAccount, kingAmount, contractAddress } = this.state;\n        const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n        const contract = new web3.eth.Contract(abi, contractAddress);\n        const weiValue = web3.utils.toWei(kingAmount);\n        const transactionObject = {\n            from: userAccount,\n            to: contractAddress,\n            value: weiValue,\n            data: contract.methods.becomeKing().encodeABI(),\n        }\n        web3.eth.sendTransaction(transactionObject)\n            .then(res => {\n                swal({\n                    icon: 'success',\n                    title: 'Tx Successfully Sent',\n                    closeOnClickOutside: false,\n                    content: (\n                        <div>\n                            <p>Transaction Hash:</p>\n                            <p><a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://ropsten.etherscan.io/tx/${res.transactionHash}`}>{res.transactionHash}</a></p>\n                        </div>)\n                });\n            })\n            .catch(err => {\n                console.log(\"err\",err)\n        });\n        this.setState({kingAmount: 0});\n        setTimeout(() => this.blockchainMessage(), 1000);\n    };\n\n    blockchainMessage = () => {\n        swal({\n            closeOnClickOutside: false,\n            button: false,\n            content: (<div>\n                <img className='block-load-img' src={ethlogo} alt='block loading'/>\n                <p>Blockchain magic in progress...</p>\n                <br/>\n            </div>)\n        });\n    };\n\n    handleInputAmountChange = event => {\n        this.setState({\n            kingAmount: event.target.value\n        });\n    }; \n\n    checkContractInfo = () => {\n        const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n        const { contractAddress } = this.state;\n        const contract = new web3.eth.Contract(abi, contractAddress);\n        contract.methods.King().call((err, res) => {\n            if(!err) {\n                this.setState({kingAddress: res});\n            }\n            else {\n                console.log(err);\n            }\n    });\n\n        contract.methods.kingRansom().call((err, res) => {\n            if(!err) {\n                const ethAmount = +web3.utils.fromWei(res);\n                this.setState({kingRansom: ethAmount.toFixed(3)})\n            }\n            else {\n                console.log(err);\n            }\n        });\n    };\n\n    checkCurrentAccount = () => {\n        const { ethereum } = window;\n        ethereum.on('accountsChanged', (accounts) => {\n            this.setState({\n                userAccount: accounts[0]\n            });\n            this.checkEthBalance(accounts[0]);\n        });\n    };\n\n    checkEthBalance = (account) => {\n        const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n        if(account !== undefined) {\n            web3.eth.getBalance(account, (err, res) => {\n                if(!err) {\n                    let shortenedEthBalance = +web3.utils.fromWei(res);\n                    this.setState({\n                        ethBalance: shortenedEthBalance.toFixed(3)\n                    })\n                }\n                else {\n                    console.log(err)\n                }\n            })\n        }\n        else {\n            this.setState({metamaskConnected: false})\n        }\n    };\n\n    render() {\n        const { metamaskConnected, ethBalance, userAccount, kingAddress, kingRansom, kingAmount } = this.state;\n        return (\n            <div>\n                {!metamaskConnected\n                ?\n                <div>\n                    <ConnectMM connectMetaMask={this.connectMetaMask} /> \n                </div>\n                : \n                <div>\n                    <KingView handleInputAmountChange={this.handleInputAmountChange} ethBalance={ethBalance} userAccount={userAccount} kingAddress={kingAddress} kingAmount={kingAmount} kingRansom={kingRansom} kingMe={this.kingMe}/>\n                </div>}\n            </div>\n        )\n    }\n};\n\n","import React from 'react';\nimport './reset.css';\nimport './App.css';\nimport './styles/sweetAlert.css'; \nimport Header from './Components/Header/Header';\nimport Dashboard from './Components/Dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        <Header />\n        <Dashboard />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}