{"version":3,"sources":["utils/contractABI.js","utils/ethlogo.png","Components/Header/Header.js","Components/ConnectMM/ConnectMM.js","Components/KingView/KingView.js","Components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","abi","Header","className","ConnectMM","props","connectMetaMask","onClick","target","rel","href","KingView","userAccount","ethBalance","kingRansom","kingAddress","kingMe","handleInputAmountChange","kingAmount","URL","blockies","createDataURL","seed","alt","src","onChange","value","type","Dashboard","ethereum","window","contractAddress","state","web3","Web3","givenProvider","contract","eth","Contract","networkVersion","enable","then","res","setState","metamaskConnected","checkContractInfo","checkCurrentAccount","checkEthBalance","setInterval","swal","icon","title","text","methods","King","call","err","console","log","ethAmount","utils","fromWei","toFixed","account","undefined","getBalance","shortenedEthBalance","autoRefreshOnNetworkChange","on","accounts","transactionObject","from","to","toWei","data","becomeKing","encodeABI","sendTransaction","closeOnClickOutside","content","transactionHash","catch","setTimeout","blockchainMessage","button","ethlogo","event","toString","this","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6GAGAA,EAAOC,QAAU,CAAEC,IAFP,CAAC,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,GAAG,KAAO,aAAa,QAAU,GAAG,SAAU,EAAK,gBAAkB,UAAU,KAAO,YAAY,CAAC,OAAS,GAAG,SAAU,EAAK,gBAAkB,UAAU,KAAO,eAAe,CAAC,SAAU,EAAK,gBAAkB,UAAU,KAAO,YAAY,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,KAAO,WAAW,KAAO,WAAW,CAAC,SAAU,EAAM,KAAO,cAAc,KAAO,YAAY,KAAO,aAAa,KAAO,Y,oBCDluBF,EAAOC,QAAU,IAA0B,qC,idCG5B,SAASE,IACpB,OACI,yBAAKC,UAAU,oBACX,wBAAIA,UAAU,gBAAd,qB,sHCHG,SAASC,EAAUC,GAAQ,IAC9BC,EAAoBD,EAApBC,gBACR,OACI,yBAAKH,UAAU,qBACX,uBAAGA,UAAU,cAAb,wEACA,4BAAQI,QAASD,GAAjB,cACA,uBAAGH,UAAU,cAAcK,OAAO,SAASC,IAAI,sBAAsBC,KAAK,uFAAsF,qD,6BCL7J,SAASC,EAASN,GAAQ,IAC7BO,EAAkGP,EAAlGO,YAAaC,EAAqFR,EAArFQ,WAAYC,EAAyET,EAAzES,WAAYC,EAA6DV,EAA7DU,YAAaC,EAAgDX,EAAhDW,OAAQC,EAAwCZ,EAAxCY,wBAAyBC,EAAeb,EAAfa,WACvFC,EAAMC,IAASC,cAAc,CAACC,KAAMP,IACxC,OACI,yBAAKZ,UAAU,uBACX,yBAAKA,UAAU,uBACX,uBAAGA,UAAU,gBAAb,iBAA2CS,GAC3C,uCAAaC,EAAb,SAEJ,yBAAKV,UAAU,uBACX,yBAAKA,UAAU,cAAcoB,IAAI,cAAcC,IAAKL,IACpD,uBAAGhB,UAAU,aAAb,SAAgCY,GAChC,6CAAmBD,EAAnB,SAEJ,yBAAKX,UAAU,mBACX,2BAAOA,UAAU,YAAYsB,SAAUR,EAAyBS,MAAOR,EAAYS,KAAK,WACxF,4BAAQxB,UAAU,YAAYI,QAASS,GAAvC,WACA,uBAAGb,UAAU,cAAb,uDAEJ,uBAAGA,UAAU,eAAb,iC,ICbSyB,E,YACjB,aAAe,IAAD,8BACV,+CAkBJtB,gBAAkB,WAAO,IACbuB,EAAaC,OAAbD,SACAE,EAAoB,EAAKC,MAAzBD,gBAEFE,EAAO,IAAIC,IAAKA,IAAKC,eAAiB,yBACtCC,EAAW,IAAIH,EAAKI,IAAIC,SAASrC,MAAK8B,GAEb,MAA5BF,EAASU,eACRV,EAASW,SACJC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVC,mBAAmB,EACnBhC,YAAa8B,EAAI,GAEjBN,SAAUA,EACVH,KAAMA,IAEV,EAAKY,oBACL,EAAKC,sBACL,EAAKC,gBAAgBL,EAAI,IACzBM,aAAY,WACR,EAAKH,oBACL,EAAKE,gBAAgBL,EAAI,MAC1B,SAKXO,IAAK,CACDC,KAAM,QACNC,MAAO,gBACPC,KAAM,0EAlDJ,EAwDdP,kBAAoB,WAAO,IAAD,EACK,EAAKb,MAAxBI,EADc,EACdA,SAAUH,EADI,EACJA,KAElBG,EAASiB,QAAQC,OAAOC,MAAK,SAACC,EAAKd,GAC3Bc,EAIAC,QAAQC,IAAIF,GAHZ,EAAKb,SAAS,CAAC5B,YAAa2B,OAOpCN,EAASiB,QAAQvC,aAAayC,MAAK,SAACC,EAAKd,GACrC,GAAIc,EAKAC,QAAQC,IAAIF,OALP,CACL,IAAMG,GAAa1B,EAAK2B,MAAMC,QAAQnB,GACtC,EAAKC,SAAS,CAAC7B,WAAY6C,EAAUG,QAAQ,UAvE3C,EAgFdf,gBAAkB,SAACgB,GAAa,IACpB9B,EAAS,EAAKD,MAAdC,UACO+B,IAAZD,EACC9B,EAAKI,IAAI4B,WAAWF,GAAS,SAACP,EAAKd,GAC/B,GAAIc,EAQAC,QAAQC,IAAIF,OARP,CAEL,IAAIU,GAAuBjC,EAAK2B,MAAMC,QAAQnB,GAC9C,EAAKC,SAAS,CACV9B,WAAYqD,EAAoBJ,QAAQ,SASpD,EAAKnB,SAAS,CAACC,mBAAmB,KAjG5B,EAqGdE,oBAAsB,WAAO,IACjBjB,EAAaC,OAAbD,SAERA,EAASsC,4BAA6B,EAEtCtC,EAASuC,GAAG,mBAAmB,SAACC,GAC5B,EAAK1B,SAAS,CACV/B,YAAayD,EAAS,KAE1B,EAAKtB,gBAAgBsB,EAAS,QA9GxB,EAmHdrD,OAAS,WAAO,IAAD,EACsE,EAAKgB,MAA9EpB,EADG,EACHA,YAAaM,EADV,EACUA,WAAYa,EADtB,EACsBA,gBAAiBE,EADvC,EACuCA,KAAMG,EAD7C,EAC6CA,SAExD,IAAIlB,GAHO,EACuDJ,WAElC,GAAM,CAClC,IAEMwD,EAAoB,CACtBC,KAAM3D,EACN4D,GAAIzC,EAEJL,MANaO,EAAK2B,MAAMa,MAAMvD,GAQ9BwD,KAAMtC,EAASiB,QAAQsB,aAAaC,aAGxC3C,EAAKI,IAAIwC,gBAAgBP,GACpB7B,MAAK,SAAAC,GACFO,IAAK,CACDC,KAAM,UACNC,MAAO,uBACP2B,qBAAqB,EACrBC,QACI,6BACQ,gDACA,2BAAG,uBAAGvE,OAAO,SAASC,IAAI,sBAAsBC,KAAI,0CAAqCgC,EAAIsC,kBAAoBtC,EAAIsC,wBAIxIC,OAAM,SAAAzB,GACHC,QAAQC,IAAI,MAAMF,MAG1B,EAAKb,SAAS,CAACzB,WAAY,IAE3BgE,YAAW,kBAAM,EAAKC,sBAAqB,UAG3ClC,IAAK,CACDC,KAAM,QACNC,MAAO,mBACPC,KAAM,yEA3JJ,EAgKd+B,kBAAoB,WAChBlC,IAAK,CACD6B,qBAAqB,EACrBM,QAAQ,EACRL,QAAU,6BACN,yBAAK5E,UAAU,iBAAiBqB,IAAK6D,IAAS9D,IAAI,kBAClD,8DACA,iCAvKE,EA6KdN,wBAA0B,SAAAqE,GACtB,EAAK3C,SAAS,CACVzB,WAAYoE,EAAM9E,OAAOkB,MAAM6D,cA5KnC,EAAKvD,MAAQ,CACTY,mBAAmB,EACnBhC,YAAa,GACbC,WAAY,IAEZkB,gBAAiB,6CACjBhB,YAAa,GACbD,WAAY,IACZI,WAAY,IAEZkB,SAAU,GACVH,KAAM,IAdA,E,sEAmLJ,IAAD,EACuFuD,KAAKxD,MAAzFY,EADH,EACGA,kBAAmB/B,EADtB,EACsBA,WAAYD,EADlC,EACkCA,YAAaG,EAD/C,EAC+CA,YAAaD,EAD5D,EAC4DA,WAAYI,EADxE,EACwEA,WAC7E,OACI,6BAEM0B,EAMF,6BAEI,kBAAC,EAAD,CAAU3B,wBAAyBuE,KAAKvE,wBAAyBJ,WAAYA,EAAYD,YAAaA,EAAaG,YAAaA,EAAaG,WAAYA,EAAYJ,WAAYA,EAAYE,OAAQwE,KAAKxE,UAN9M,6BACI,kBAAC,EAAD,CAAWV,gBAAiBkF,KAAKlF,wB,GA5LdmF,aCQxBC,MAXf,WACE,OACE,yBAAKvF,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYwF,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,kB","file":"static/js/main.96101381.chunk.js","sourcesContent":["// Contract address https://ropsten.etherscan.io/address/0x04d27c6ec43f965bd490935873c9aea6987bdef4\nconst abi = [{\"constant\":true,\"inputs\":[],\"name\":\"King\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kingRansom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeKing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newKing\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_kingRansom\",\"type\":\"uint256\"}],\"name\":\"Coronation\",\"type\":\"event\"}];\n\nmodule.exports = { abi };","module.exports = __webpack_public_path__ + \"static/media/ethlogo.bdc70232.png\";","import React from 'react';\nimport './Header.css';\n\nexport default function Header() {\n    return (\n        <div className='header-container'>\n            <h1 className='header-title'>King of the Dapp</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport './ConnectMM.css';\n\nexport default function ConnectMM(props) {\n    const { connectMetaMask } = props;\n    return (\n        <div className='connect-container'>\n            <p className='mm-message'>Please make sure that you are connected to the Ropsten Test Network.</p>\n            <button onClick={connectMetaMask}>Connect MM</button>\n            <a className='mm-download' target=\"_blank\" rel=\"noopener noreferrer\" href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn'><span>Download MetaMask</span></a>\n        </div>\n    )\n};\n\n","import React from 'react';\nimport './KingView.css';\nimport blockies from 'ethereum-blockies-png';\n\nexport default function KingView(props) {\n    const { userAccount, ethBalance, kingRansom, kingAddress, kingMe, handleInputAmountChange, kingAmount } = props;\n    let URL = blockies.createDataURL({seed: kingAddress});\n    return (\n        <div className='dashboard-container'>\n            <div className='user-info-container'>\n                <p className='user-address'>Your Address: {userAccount}</p>\n                <p>Balance: {ethBalance} ETH</p>\n            </div>\n            <div className='king-info-container'>\n                <img className='blockie-img' alt='eth-blockie' src={URL} />\n                <p className='king-name'>King: {kingAddress}</p>\n                <p>King's Ransom: {kingRansom} ETH</p>\n            </div>\n            <div className='input-container'>\n                <input className='input-box' onChange={handleInputAmountChange} value={kingAmount} type=\"number\"/>\n                <button className='input-btn' onClick={kingMe}>King Me</button>\n                <p className='input-text'>*Enter an amount that is at least 0.1 ETH greater.</p>\n            </div>\n            <p className='medium-link'>Read the tutorial on Medium.</p>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { abi } from '../../utils/contractABI';\nimport swal from '@sweetalert/with-react';\nimport ethlogo from '../../utils/ethlogo.png';\n\n// React Components \nimport ConnectMM from '../ConnectMM/ConnectMM';\nimport KingView from '../KingView/KingView';\n\nexport default class Dashboard extends Component {\n    constructor() {\n        super();\n        \n        this.state = {\n            metamaskConnected: false,\n            userAccount: \"\",\n            ethBalance: \"0\",\n            // Contract was already deployed to this address on the Ropsten Test Network\n            contractAddress: \"0xECdAb99dBa830F3a097c3bF97139E24Bd4A214d0\",\n            kingAddress: \"\",\n            kingRansom: \"0\",\n            kingAmount: \"0\",\n            // Saving both the contract and web3 instance to the state obj\n            contract: {},\n            web3: {}\n        };\n    };\n    \n    // Prompts the user to connect their MetaMask account to the website\n    connectMetaMask = () => {\n        const { ethereum } = window;\n        const { contractAddress } = this.state;\n        // Creating both a web3 and contract instance\n        const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n        const contract = new web3.eth.Contract(abi, contractAddress);\n        // Contract was deployed to Ropsten, this checks to make sure that the user is connected to the correct network\n        if(ethereum.networkVersion === \"3\") {\n            ethereum.enable()\n                .then(res => {\n                    this.setState({\n                        metamaskConnected: true,\n                        userAccount: res[0],\n                        // Storing instances in the state obj\n                        contract: contract,\n                        web3: web3\n                    });\n                    this.checkContractInfo();\n                    this.checkCurrentAccount();\n                    this.checkEthBalance(res[0]);\n                    setInterval(() => {\n                        this.checkContractInfo();\n                        this.checkEthBalance(res[0]);\n                    }, 25000);\n                });\n        }\n        else {\n            // Error message thrown if the user isn't connect to Ropsten\n            swal({\n                icon: \"error\",\n                title: \"Network Error\",\n                text: \"Please switch to the Ropsten Test Network in your MetaMask extension\"\n            });\n        }\n    };\n\n    // Checks the current state of the contract variables\n    checkContractInfo = () => {\n        const { contract, web3 } = this.state;\n        // Returns which address is the current King\n        contract.methods.King().call((err, res) => {\n            if(!err) {\n                this.setState({kingAddress: res});\n            }\n            else {\n                console.log(err);\n            }\n        });\n        // Returns how much Ether that address has locked up\n        contract.methods.kingRansom().call((err, res) => {\n            if(!err) {\n                const ethAmount = +web3.utils.fromWei(res);\n                this.setState({kingRansom: ethAmount.toFixed(3)})\n            }\n            else {\n                console.log(err);\n            }\n        });\n    };\n\n    // Looks for the user's current Eth balance on the Ropsten Test Network, if they are on a different network it throws an error message\n    checkEthBalance = (account) => {\n        const { web3 } = this.state;\n        if(account !== undefined) {\n            web3.eth.getBalance(account, (err, res) => {\n                if(!err) {\n                    // The response comes back as a string, however, I only want to display 3 decimal places so I convert it to a number to use the toFixed method\n                    let shortenedEthBalance = +web3.utils.fromWei(res);\n                    this.setState({\n                        ethBalance: shortenedEthBalance.toFixed(3)\n                    })\n                }\n                else {\n                    console.log(err)\n                }\n            });\n        }\n        else {\n            this.setState({metamaskConnected: false});\n        }\n    };\n    \n    checkCurrentAccount = () => {\n        const { ethereum } = window;\n        // Prevents the page from reloading when the user changes networks. \n        ethereum.autoRefreshOnNetworkChange = false;\n        // Anytime the user changes their MetaMask account this function will run and update the UI to show the selected account and its Ether balance\n        ethereum.on('accountsChanged', (accounts) => {\n            this.setState({\n                userAccount: accounts[0]\n            });\n            this.checkEthBalance(accounts[0]);\n        });\n    };\n    \n    // Method that creates an Eth transaction to update the state of the contract\n    kingMe = () => {\n        const { userAccount, kingAmount, contractAddress, web3, contract, kingRansom } = this.state;\n        // Makes sure that the use has entered in an amount that is more than 0.1 Eth greater than the current kingRansom\n        if(+kingAmount > (+kingRansom + 0.1)) {\n            const weiValue = web3.utils.toWei(kingAmount);\n\n            const transactionObject = {\n                from: userAccount,\n                to: contractAddress,\n                // Value must be sent in wei\n                value: weiValue,\n                // Data payload for the tx. The contract will know to invoke becomeKing method and check to see if value was sent with the tx.\n                data: contract.methods.becomeKing().encodeABI(),\n            }\n\n            web3.eth.sendTransaction(transactionObject)\n                .then(res => {\n                    swal({\n                        icon: 'success',\n                        title: 'Tx Successfully Sent',\n                        closeOnClickOutside: false,\n                        content: (\n                            <div>\n                                    <p>Transaction Hash:</p>\n                                    <p><a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://ropsten.etherscan.io/tx/${res.transactionHash}`}>{res.transactionHash}</a></p>\n                                </div>)\n                        });\n                    })\n                .catch(err => {\n                    console.log(\"err\",err)\n                });\n            // Sets in the input box to zero\n            this.setState({kingAmount: 0});\n            // Creates an animation while the use is waiting for their tx to be submitted.\n            setTimeout(() => this.blockchainMessage(), 1000);\n        }\n        else {\n            swal({\n                icon: \"error\",\n                title: \"Incorrect Amount\",\n                text: \"The amount must be at least 0.1 greater than the current kingRansom\"\n            });\n        }\n    };\n        \n    blockchainMessage = () => {\n        swal({\n            closeOnClickOutside: false,\n            button: false,\n            content: (<div>\n                <img className='block-load-img' src={ethlogo} alt='block loading'/>\n                <p>Blockchain magic in progress...</p>\n                <br/>\n            </div>)\n        });\n    };\n\n    // Sets the state of the kingAmount variable when the user types in the input box\n    handleInputAmountChange = event => {\n        this.setState({\n            kingAmount: event.target.value.toString()\n        });\n    }; \n\n    render() {\n        const { metamaskConnected, ethBalance, userAccount, kingAddress, kingRansom, kingAmount } = this.state;\n        return (\n            <div>\n                {/* Conditional rendering based on if the user has connected their MetaMask account */}\n                {!metamaskConnected\n                ?\n                <div>\n                    <ConnectMM connectMetaMask={this.connectMetaMask} /> \n                </div>\n                : \n                <div>\n                    {/* View that shows info about the user's MetaMask account and the state of the King of the Dapp Contract */}\n                    <KingView handleInputAmountChange={this.handleInputAmountChange} ethBalance={ethBalance} userAccount={userAccount} kingAddress={kingAddress} kingAmount={kingAmount} kingRansom={kingRansom} kingMe={this.kingMe}/>\n                </div>}\n            </div>\n        )\n    }\n};\n\n","import React from 'react';\nimport './reset.css';\nimport './App.css';\nimport './styles/sweetAlert.css'; \nimport Header from './Components/Header/Header';\nimport Dashboard from './Components/Dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        <Header />\n        <Dashboard />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}